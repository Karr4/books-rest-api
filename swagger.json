{
  "swagger": "5.0.0",
  "openapi": "3.1.0",
  "info": {
    "version": "1.5.0",
    "title": "Books documentation",
    "description": "Documentation to University Practice Books Rest API"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "" }],
  "tags": [
    {
      "name": "Authorization",
      "description": "Endpoints for user authorization and authentication"
    },
    {
      "name": "Books",
      "description": "Endpoints for manipulation with books"
    }
  ],
  "paths": {
    "/api/users/signup": {
      "post": {
        "tags": ["Authorization"],
        "summary": "User registration",
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request body response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestBodyResponse"
                }
              }
            }
          },
          "409": {
            "description": "Email is already in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationEmailInUseResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/verify": {
      "post": {
        "tags": ["Authorization"],
        "summary": "Resend signup verification e-mail.",
        "requestBody": {
          "description": "E-mail with witch user has been registrated on service.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreEmailRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationSuccessful"
                }
              }
            }
          },
          "400": {
            "description": "Bad request body response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestBodyResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": ["Authorization"],
        "summary": "User login into webapp",
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request body response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestBodyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden request because email is not already verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["Authorization"],
        "summary": "Get current user logged",
        "security": [{ "Bearer": "" }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedWithoutTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "tags": ["Authorization"],
        "summary": "Logout current user",
        "security": [{ "Bearer": [] }],
        "responses": {
          "204": {
            "description": "Successful logout operation",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedWithoutTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "delete": {
        "tags": ["Authorization"],
        "summary": "Delete account",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "User current password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful get operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAccountResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request body response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestBodyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedWithoutTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/books": {
      "get": {
        "tags": ["Books"],
        "summary": "Get all books",
        "responses": {
          "200": {
            "description": "Successful get operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Books"],
        "summary": "Add new book",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Book's properties",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookAddUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully added new book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request body response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestBodyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden request because email is not already verified",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ForbiddenResponse"
                    },
                    {
                      "$ref": "#/components/schemas/NotAppropriateRole"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/api/books/:bookId": {
      "get": {
        "tags": ["Books"],
        "summary": "Get a book by it's ID",
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "description": "ID of the book you want to get",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedWithoutTokenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Books"],
        "summary": "Delete a book by it's ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "description": "ID of the book you want to delete",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted a book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookDeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedWithoutTokenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Books"],
        "summary": "Update a book by its's ID",
        "parameters": [
          {
            "in": "path",
            "name": "bookId",
            "description": "ID of the book you want to update",
            "required": true
          }
        ],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Book's properties",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookAddUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated a book",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedWithoutTokenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/api/books/favorite": {
      "get": {
        "tags": ["Books"],
        "summary": "Get user's favorite books",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successfully updated a book",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BookResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedWithoutTokenResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Books"],
        "summary": "Add book to user's favorites",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "ID of the book to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteBookAddRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully added new book to favorites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request body response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestBodyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden request because email is not already verified",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ForbiddenResponse"
                    },
                    {
                      "$ref": "#/components/schemas/NotAppropriateRole"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Books"],
        "summary": "Remove book from user's favorites",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "ID of the book to remove",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FavoriteBookRemoveRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully deleted a book from favorites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FavoriteBookDeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedWithoutTokenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BadRequestBodyResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "error message",
            "example": "Missing fields"
          }
        }
      },
      "NotFoundError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not found"
          }
        }
      },
      "UnauthorizedResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "This message will indicate you that both 'email' or 'password' are wrong , as well as one of them",
            "example": "Email or password is wrong"
          }
        }
      },
      "ForbiddenResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "This request is forbidden bacause email address isn't verified",
            "example": "Forbidden request due to not verified email"
          }
        }
      },
      "UnauthorizedWithoutTokenResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Missing access token",
            "example": "Not authorized"
          }
        }
      },
      "NotAppropriateRole": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "This request  is forbidden because user has an inappropriate role",
            "example": "Forbidden due to inappropriate role"
          }
        }
      },

      "RegistrationRequest": {
        "type": "object",
        "requiered": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password must have minimun 8 and maximum 64 symbols one of those must be a special symbol, thus '@$!%*?&'",
            "example": "qwerty12!"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "role": {
                "type": "string",
                "enum": "['admin', 'client']",
                "description": "Can be either 'admin' or 'client'",
                "example": "admin"
              }
            }
          }
        }
      },
      "RegistrationEmailInUseResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "error message",
            "example": "Email is already in use"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "requiered": ["email", "password"],
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "role": {
                "type": "string",
                "enum": "['admin', 'client']",
                "description": "Can be either 'admin' or 'client'",
                "example": "admin"
              },
              "favorites": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BookResponse"
                }
              }
            }
          },
          "token": {
            "type": "string",
            "description": "Unique JWT token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1NTBkNzU1OGY4NzQ0Y2E3ZjAzMDc5NSIsImlhdCI6MTY5OTgwMDIxOSwiZXhwIjoxNzAwNDA1MDE5fQ.O4qfwxi3OMwQDOlz5bH1J6dQOs_B9fOqjWSF5KLW9I0"
          }
        }
      },
      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              },
              "role": {
                "type": "string",
                "enum": "['admin', 'client']",
                "description": "Can be either 'admin' or 'client'",
                "example": "admin"
              },
              "favorites": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BookResponse"
                }
              }
            }
          }
        }
      },
      "DeleteAccountRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "User's password must have minimun 8 and maximum 64 symbols one of those must be a special symbol, thus '@$!%*?&'",
            "example": "qwerty12!"
          }
        }
      },
      "DeleteAccountResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User deleted"
          }
        }
      },
      "VerificationSuccessful": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Verification successful"
          }
        }
      },

      "BookResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Book's ID",
            "example": "65d636165d6361asd"
          },
          "title": {
            "type": "string",
            "desctirpion": "Book's title",
            "example": "Harry Potter"
          },
          "releaseDate": {
            "type": "string",
            "description": "Date of the release",
            "example": "2024-01-01"
          },
          "genres": {
            "type": "array",
            "description": "Array of book's genres",
            "items": {
              "type": "string",
              "description": "Book's genre"
            },
            "example": ["Thriller", "Detective"]
          },
          "authors": {
            "type": "array",
            "description": "Array of book's authors",
            "items": {
              "type": "string",
              "description": "Book's author"
            },
            "example": ["William Shakespear", "Charles Dickens"]
          }
        }
      },
      "BookAddUpdateRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "desctirpion": "Book's title",
            "example": "Harry Potter"
          },
          "releaseDate": {
            "type": "string",
            "description": "Date of the release",
            "example": "2024-01-01"
          },
          "genres": {
            "type": "array",
            "description": "Array of book's genres",
            "items": {
              "type": "string",
              "description": "Book's genre"
            },
            "example": ["Thriller", "Detective"]
          },
          "authors": {
            "type": "array",
            "description": "Array of book's authors",
            "items": {
              "type": "string",
              "description": "Book's author"
            },
            "example": ["William Shakespear", "Charles Dickens"]
          }
        }
      },
      "BookDeleteResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Book deleted"
          }
        }
      },
      "FavoriteBookAddRequest": {
        "type": "object",
        "properties": {
          "bookId": {
            "type": "string",
            "description": "ID of the book you want to add",
            "example": "65d636165d6361asd"
          }
        }
      },
      "FavoriteBookRemoveRequest": {
        "type": "object",
        "properties": {
          "bookId": {
            "type": "string",
            "description": "ID of the book you want to remove",
            "example": "65d636165d6361asd"
          }
        }
      },
      "FavoriteBookDeleteResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Book deleted from favorites"
          }
        }
      },
      "securitySchemes": {
        "Bearer": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    }
  }
}
